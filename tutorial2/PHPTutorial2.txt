In this tutorial, we will create a login page that directs the user to edit his/her profile once logged in successfully.
Topics covered in this tutorial:
I-   PHP connection to MySQL
II-  HTML Forms
III- Submitting SQL queries from PHP to MySQL.
IV-  Parsing query results from MySQL in PHP.
V-   PHP sessions (Session management is the technique used by the web developer to make the stateless HTTP protocol support session state. For example, once a user has been authenticated to the web server, the user's next HTTP request (GET or POST) should not cause the web server to ask for the user's account and password again.)

The files created in this tutorial (connection.php, index.php, profile.php) are organized as follows in the xampp\htdocs folder:
mysite/
  |_config/
	  |_connection.php
  |_index.php
  |_profile.php

  
1- Run the following SQL script to create a "cisc332db" database and user table with two new users (admin and user1).
**Note that cisc332 user should be already created from tutorial 1. If the user does not exist, please follow tutorial1 steps.


DROP DATABASE cisc332db;
CREATE DATABASE cisc332db;
CREATE TABLE cisc332db.user ( `id` INT NOT NULL AUTO_INCREMENT , `username` VARCHAR(10) NOT NULL , `password` VARCHAR(50) NOT NULL , `email` VARCHAR(50) NOT NULL , PRIMARY KEY (`id`), UNIQUE `username` (`username`)) ENGINE = InnoDB;
INSERT INTO cisc332db.user (`id`, `username`, `password`, `email`) VALUES (NULL, 'admin', 'admin', 'admin@mysite.com');
INSERT INTO cisc332db.user (`id`, `username`, `password`, `email`) VALUES (NULL, 'user1', 'user1', 'user1@mysite.com');


2- Download the PHP files from https://github.com/yelshater/cisc332/tutorial2. You can go to https://github.com/yelshater/cisc332/ and click "Clone or download" button to download all the materials.

3. Place mysite folder to:

    C:\xampp\htdocs  (Windows)
    /opt/lampp/htdocs (Linux) (make sure you are sudo while moving)
    /Applications/XAMPP/htdocs (MAC)

4- open config/connection.php with an editor
***************************
<?php
// used to connect to the database
$host = "localhost";
$db_name = "cisc332db";
$username = "cisc332"; // use your own username and password if different from mine
$password = "cisc332password";

try {
    $con = new mysqli($host,$username,$password, $db_name);
}
 
// show error
catch(Exception $exception){
    echo "Connection error: " . $exception->getMessage();
}

?>
***************************

5- index.php file contains the HTML code for login information.
***************************
<!DOCTYPE HTML>
<html>
    <head>
        <title>Welcome to mysite</title>
  
    </head>
<body>
 
<!-- dynamic content will be here -->
 <form name='login' id='login' action='index.php' method='post'>
    <table border='0'>
        <tr>
            <td>Username</td>
            <td><input type='text' name='username' id='username' /></td>
        </tr>
        <tr>
            <td>Password</td>
             <td><input type='password' name='password' id='password' /></td>
        </tr>
        <tr>
            <td></td>
            <td>
                <input type='submit' id='loginBtn' name='loginBtn' value='Log In' /> 
            </td>
        </tr>
    </table>
</form>

</body>
</html>
***************************

6- profile.php contains the profile editing form and logout link HTML code.
***************************
<!DOCTYPE HTML>
<html>
    <head>
        <title>Welcome to mysite</title>
  
    </head>
<body>
 Welcome {name}, <a href="index.php?logout=1">Log Out</a><br/>
<!-- dynamic content will be here -->
<form name='editProfile' id='editProfile' action='profile.php' method='post'>
    <table border='0'>
        <tr>
            <td>Username</td>
            <td><input type='text' name='username' id='username' disabled/></td>
        </tr>
        <tr>
            <td>Password</td>
             <td><input type='password' name='password' id='password' /></td>
        </tr>
		<tr>
            <td>Email</td>
            <td><input type='text' name='email' id='email' /></td>
        </tr>
        <tr>
            <td></td>
            <td>
                <input type='submit' name='updateBtn' id='updateBtn' value='Update' /> 
            </td>
        </tr>
    </table>
</form>
</body>
</html>
***************************

7- To enable PHP session, add the following PHP code to both index.php and profile.php just after the <body> tag.
***************************
 <?php
  //Create a user session or resume an existing one
 session_start();
 ?>
***************************

8- To connect to the database and check the user's credentials once the login form is submitted add the following PHP code to index.php just before the HTML form code 
***************************
 <?php
//check if the login form has been submitted
if(isset($_POST['loginBtn'])){
 
    // include database connection
    include_once 'config/connection.php'; 
	
	// SELECT query
        $query = "SELECT id,username, password, email FROM user WHERE username=? AND password=?";
 
        // prepare query for execution
        if($stmt = $con->prepare($query)){
		
        // bind the parameters. This is the best way to prevent SQL injection hacks. ss means the two parameters are strings.
        $stmt->bind_Param("ss", $_POST['username'], $_POST['password']);
         
        // Execute the query
		$stmt->execute();
 
		// Get Results
		$result = $stmt->get_result();

		// Get the number of rows returned
		$num = $result->num_rows;;
		
		if($num>0){
			//If the username/password matches a user in our database
			//Read the user details
			$myrow = $result->fetch_assoc();
			//Create a session variable that holds the user's id
			$_SESSION['id'] = $myrow['id'];
			//Redirect the browser to the profile editing page and kill this page.
			header("Location: profile.php");
			die();
		} else {
			//If the username/password doesn't matche a user in our database
			// Display an error message and the login form
			echo "Failed to login";
		}
		} else {
			echo "failed to prepare the SQL";
		}
 }
 
?>
***************************

9- Redirect the user to profile.php if he/she is already logged in and  goes to index.php. Add the following PHP code to index.php just before the PHP code of STEP 8 to check first if the user has a SESSION, if yes redirect to profile.php, else display the login form.
***************************
 <?php
 //check if the user is already logged in and has an active session
if(isset($_SESSION['id'])){
	//Redirect the browser to the profile editing page and kill this page.
	header("Location: profile.php");
	die();
}
 ?>
 ***************************

10- Destroy the user's session when the user clicks the logout link in profile.php. Go to index.php and add the following code just above the code added in STEP 9
***************************
 <?php
 //check if the user clicked the logout link and set the logout GET parameter
if(isset($_GET['logout'])){
	//Destroy the user's session.
	$_SESSION['id']=null;
	session_destroy();
}
 ?>
***************************

11- In profile.php, show the user's profile data if logged in, otherwise redirect to the login page. Add the following code to profile.php just after the session_start() php code snippet.
***************************
 <?php
if(isset($_SESSION['id'])){
   // include database connection
    include_once 'config/connection.php'; 
	
	// SELECT query
        $query = "SELECT id,username, password, email FROM user WHERE id=?";
 
        // prepare query for execution
        $stmt = $con->prepare($query);
		
        // bind the parameters. This is the best way to prevent SQL injection hacks.
        $stmt->bind_Param("s", $_SESSION['id']);

        // Execute the query
		$stmt->execute();
 
		// results 
		$result = $stmt->get_result();
		
		// Row data
		$myrow = $result->fetch_assoc();
		
} else {
	//User is not logged in. Redirect the browser to the login index.php page and kill this page.
	header("Location: index.php");
	die();
}

?>
***************************

12- In profile.php, modify the profile form HTML code with a number of PHP statements to display the user's data in the form.
***************************
 Welcome  <?php echo $myrow['username']; ?>, <a href="index.php?logout=1">Log Out</a><br/>
<!-- dynamic content will be here -->
<form name='editProfile' id='editProfile' action='profile.php' method='post'>
    <table border='0'>
        <tr>
            <td>Username</td>
            <td><input type='text' name='username' id='username' disabled  value="<?php echo $myrow['username']; ?>"  /></td>
        </tr>
        <tr>
            <td>Password</td>
             <td><input type='text' name='password' id='password'  value="<?php echo $myrow['password']; ?>" /></td>
        </tr>
		<tr>
            <td>Email</td>
            <td><input type='text' name='email' id='email'  value="<?php echo $myrow['email']; ?>" /></td>
        </tr>
        <tr>
            <td></td>
            <td>
                <input type='submit' name='updateBtn' id='updateBtn' value='Update' /> 
            </td>
        </tr>
    </table>
</form>
***************************

13- In profile.php, update the user's record in the database as the user submits the profile form. Add the following code above STEP 11 code.
***************************
<?php
 
 if(isset($_POST['updateBtn']) && isset($_SESSION['id'])){
  // include database connection
    include_once 'config/connection.php'; 
	
	$query = "UPDATE user SET password=?,email=? WHERE id=?";
 
	$stmt = $con->prepare($query);
	$stmt->bind_param('sss', $_POST['password'], $_POST['email'], $_SESSION['id']);
	// Execute the query
        if($stmt->execute()){
            echo "Record was updated. <br/>";
        }else{
            echo 'Unable to update record. Please try again. <br/>';
        }
 }
 
 ?>
 ***************************